/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author jijwa
 */
public class frmAlgorithmDesignJW extends javax.swing.JFrame {

    /**
     * Creates new form frmAlgorithmDesignJW
     */
    
    // Methods
    
    /* factorial
    This method finds the factorial of a number
    
    parameters: int
    
    returns: int
    */
    public static int factorial(int inputNum) {
        // Variables
        int factorial = inputNum;
        
        // Determine factorial
        for (int i = factorial - 1; i > 1; i --) {
            factorial = factorial * i;
        }
        
        return factorial;
    }
    
    /* isPrime
    This method determines if a number is prime
    
    parameters: int
    
    returns: boolean
    */
    public static boolean isPrime(int inputNum) {
        // Variables
        double maxFactor = Math.sqrt(inputNum);
        
        // Determine if the number has any factors other than 1 and itself
        for (int i = 2; i <= maxFactor; i ++) {
            if (inputNum % i == 0) {
                return false;
            }
        }
        
        // Determine if the number is greater than 1
        return inputNum > 1;
    }

    /* fibonacci
    This method determins the fibonnaci sequence at a given index
    
    parameters: int
    
    returns: int
    */    
    public static int fibonacci(int inputNum) {
        // Variables
        int nextNum;
        int [] sequence = {0, 1};
        
        // Determine the fibonacci number
        for (int i = 0; i < inputNum; i ++) {
            nextNum = sequence[0] + sequence[1];
            sequence[0] = sequence[1];
            sequence[1] = nextNum;
        }
        
        return sequence[0];
    }
    
    public frmAlgorithmDesignJW() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbOperation = new javax.swing.JComboBox<>();
        spnInput = new javax.swing.JSpinner();
        lblTitle = new javax.swing.JLabel();
        lblResultsHeader = new javax.swing.JLabel();
        lblResults = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();
        lblInst = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbOperation.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        cmbOperation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "The Factorial of", "Is the Following Prime", "The Fibonacci Sequence at " }));
        cmbOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOperationActionPerformed(evt);
            }
        });

        spnInput.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblTitle.setFont(new java.awt.Font("Sitka Text", 0, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("The Amazing Algorithm Answerer");

        lblResultsHeader.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblResultsHeader.setText("The factorial is:");

        lblResults.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        btnCalculate.setFont(new java.awt.Font("Sitka Text", 0, 24)); // NOI18N
        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        lblInst.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblInst.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInst.setText("Select an algorithm, enter a number, click the button, and watch the amazingness");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmbOperation, javax.swing.GroupLayout.Alignment.LEADING, 0, 300, Short.MAX_VALUE)
                    .addComponent(spnInput, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblResultsHeader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblResults, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCalculate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblInst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(lblInst)
                .addGap(18, 18, 18)
                .addComponent(cmbOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblResultsHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblResults, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        // TODO add your handling code here:
        
        // Variables
        int operation;
        int inputNum;
        int factorial;
        int fibonacci;
        
        // Get the selected operation
        operation = cmbOperation.getSelectedIndex();
        
        // Get input
        inputNum = (int)spnInput.getValue();
        
        // Run the correct operation
        switch (operation) {
            case 0:
                // Determine and output the factorial
                factorial = factorial(inputNum);
                lblResults.setText(String.valueOf(factorial));
                break;
            case 1:
                // Determine and output whether or not the number is prime
                if (isPrime(inputNum)) {
                     lblResults.setText("Yes, the number is prime!");
                } else {
                    lblResults.setText("No, the number isn't prime!");
                }
                break;
            case 2:
                // Determine and output the fibonacci number
                fibonacci = fibonacci(inputNum);
                lblResults.setText(String.valueOf(fibonacci));
                break;
            default:
                System.out.println("Error, Invalid Input!");
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void cmbOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOperationActionPerformed
        // TODO add your handling code here:
        
        // Constants
        final String [] RESULT_LABELS = {"The Factorial is: ", "Is the number prime?: ", "The Fibonacci sequence is: "};

        // Variables
        int operation;
        
        // Get the selected operation
        operation = cmbOperation.getSelectedIndex();
        
        // Output the correct label
        lblResultsHeader.setText(RESULT_LABELS[operation]);
    }//GEN-LAST:event_cmbOperationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesignJW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesignJW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesignJW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAlgorithmDesignJW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAlgorithmDesignJW().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JComboBox<String> cmbOperation;
    private javax.swing.JLabel lblInst;
    private javax.swing.JLabel lblResults;
    private javax.swing.JLabel lblResultsHeader;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSpinner spnInput;
    // End of variables declaration//GEN-END:variables
}
